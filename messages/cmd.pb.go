// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cmd.proto

package messages

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EmptyReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyReq) Reset()         { *m = EmptyReq{} }
func (m *EmptyReq) String() string { return proto.CompactTextString(m) }
func (*EmptyReq) ProtoMessage()    {}
func (*EmptyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7520252fb01eaf30, []int{0}
}

func (m *EmptyReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyReq.Unmarshal(m, b)
}
func (m *EmptyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyReq.Marshal(b, m, deterministic)
}
func (m *EmptyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyReq.Merge(m, src)
}
func (m *EmptyReq) XXX_Size() int {
	return xxx_messageInfo_EmptyReq.Size(m)
}
func (m *EmptyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyReq.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyReq proto.InternalMessageInfo

type ServiceResp struct {
	RequestId            int64    `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Status               int64    `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceResp) Reset()         { *m = ServiceResp{} }
func (m *ServiceResp) String() string { return proto.CompactTextString(m) }
func (*ServiceResp) ProtoMessage()    {}
func (*ServiceResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7520252fb01eaf30, []int{1}
}

func (m *ServiceResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceResp.Unmarshal(m, b)
}
func (m *ServiceResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceResp.Marshal(b, m, deterministic)
}
func (m *ServiceResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceResp.Merge(m, src)
}
func (m *ServiceResp) XXX_Size() int {
	return xxx_messageInfo_ServiceResp.Size(m)
}
func (m *ServiceResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceResp.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceResp proto.InternalMessageInfo

func (m *ServiceResp) GetRequestId() int64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *ServiceResp) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ServiceResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type LaunchConfig struct {
	MemAlloc             int64    `protobuf:"varint,1,opt,name=mem_alloc,json=memAlloc,proto3" json:"mem_alloc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LaunchConfig) Reset()         { *m = LaunchConfig{} }
func (m *LaunchConfig) String() string { return proto.CompactTextString(m) }
func (*LaunchConfig) ProtoMessage()    {}
func (*LaunchConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_7520252fb01eaf30, []int{2}
}

func (m *LaunchConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LaunchConfig.Unmarshal(m, b)
}
func (m *LaunchConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LaunchConfig.Marshal(b, m, deterministic)
}
func (m *LaunchConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LaunchConfig.Merge(m, src)
}
func (m *LaunchConfig) XXX_Size() int {
	return xxx_messageInfo_LaunchConfig.Size(m)
}
func (m *LaunchConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_LaunchConfig.DiscardUnknown(m)
}

var xxx_messageInfo_LaunchConfig proto.InternalMessageInfo

func (m *LaunchConfig) GetMemAlloc() int64 {
	if m != nil {
		return m.MemAlloc
	}
	return 0
}

func init() {
	proto.RegisterType((*EmptyReq)(nil), "messages.EmptyReq")
	proto.RegisterType((*ServiceResp)(nil), "messages.ServiceResp")
	proto.RegisterType((*LaunchConfig)(nil), "messages.LaunchConfig")
}

func init() { proto.RegisterFile("cmd.proto", fileDescriptor_7520252fb01eaf30) }

var fileDescriptor_7520252fb01eaf30 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0xce, 0x4d, 0xd1,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xc8, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x2d, 0x56,
	0xe2, 0xe2, 0xe2, 0x70, 0xcd, 0x2d, 0x28, 0xa9, 0x0c, 0x4a, 0x2d, 0x54, 0x8a, 0xe3, 0xe2, 0x0e,
	0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x0d, 0x4a, 0x2d, 0x2e, 0x10, 0x92, 0xe5, 0xe2, 0x2a, 0x4a,
	0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x89, 0xcf, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e, 0xe2,
	0x84, 0x8a, 0x78, 0xa6, 0x08, 0x89, 0x71, 0xb1, 0x15, 0x97, 0x24, 0x96, 0x94, 0x16, 0x4b, 0x30,
	0x81, 0xa5, 0xa0, 0x3c, 0x21, 0x09, 0x2e, 0x76, 0xa8, 0xe9, 0x12, 0xcc, 0x0a, 0x8c, 0x1a, 0x9c,
	0x41, 0x30, 0xae, 0x92, 0x36, 0x17, 0x8f, 0x4f, 0x62, 0x69, 0x5e, 0x72, 0x86, 0x73, 0x7e, 0x5e,
	0x5a, 0x66, 0xba, 0x90, 0x34, 0x17, 0x67, 0x6e, 0x6a, 0x6e, 0x7c, 0x62, 0x4e, 0x4e, 0x7e, 0x32,
	0xd4, 0x7c, 0x8e, 0xdc, 0xd4, 0x5c, 0x47, 0x10, 0xdf, 0x68, 0x33, 0x23, 0x17, 0x97, 0x73, 0x6e,
	0x0a, 0xd4, 0x41, 0x42, 0x96, 0x5c, 0x6c, 0x10, 0xbd, 0x42, 0x62, 0x7a, 0x30, 0xc7, 0xeb, 0x21,
	0x9b, 0x26, 0x25, 0x8a, 0x10, 0x47, 0xf2, 0x85, 0x12, 0x83, 0x90, 0x31, 0x17, 0x4b, 0x70, 0x49,
	0x7e, 0x81, 0x90, 0x10, 0x42, 0x01, 0xcc, 0xcb, 0xb8, 0x35, 0x99, 0x72, 0xb1, 0x05, 0x43, 0xfc,
	0x43, 0x8a, 0xb6, 0x24, 0x36, 0x70, 0xf8, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xab, 0xa5,
	0x76, 0xd6, 0x6c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CmdServiceClient is the client API for CmdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CmdServiceClient interface {
	Launch(ctx context.Context, in *LaunchConfig, opts ...grpc.CallOption) (*ServiceResp, error)
	Stop(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*ServiceResp, error)
	Status(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*ServiceResp, error)
}

type cmdServiceClient struct {
	cc *grpc.ClientConn
}

func NewCmdServiceClient(cc *grpc.ClientConn) CmdServiceClient {
	return &cmdServiceClient{cc}
}

func (c *cmdServiceClient) Launch(ctx context.Context, in *LaunchConfig, opts ...grpc.CallOption) (*ServiceResp, error) {
	out := new(ServiceResp)
	err := c.cc.Invoke(ctx, "/messages.CmdService/Launch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdServiceClient) Stop(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*ServiceResp, error) {
	out := new(ServiceResp)
	err := c.cc.Invoke(ctx, "/messages.CmdService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdServiceClient) Status(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*ServiceResp, error) {
	out := new(ServiceResp)
	err := c.cc.Invoke(ctx, "/messages.CmdService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmdServiceServer is the server API for CmdService service.
type CmdServiceServer interface {
	Launch(context.Context, *LaunchConfig) (*ServiceResp, error)
	Stop(context.Context, *EmptyReq) (*ServiceResp, error)
	Status(context.Context, *EmptyReq) (*ServiceResp, error)
}

// UnimplementedCmdServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCmdServiceServer struct {
}

func (*UnimplementedCmdServiceServer) Launch(ctx context.Context, req *LaunchConfig) (*ServiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Launch not implemented")
}
func (*UnimplementedCmdServiceServer) Stop(ctx context.Context, req *EmptyReq) (*ServiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedCmdServiceServer) Status(ctx context.Context, req *EmptyReq) (*ServiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterCmdServiceServer(s *grpc.Server, srv CmdServiceServer) {
	s.RegisterService(&_CmdService_serviceDesc, srv)
}

func _CmdService_Launch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServiceServer).Launch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.CmdService/Launch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServiceServer).Launch(ctx, req.(*LaunchConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmdService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.CmdService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServiceServer).Stop(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmdService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.CmdService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServiceServer).Status(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CmdService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messages.CmdService",
	HandlerType: (*CmdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Launch",
			Handler:    _CmdService_Launch_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _CmdService_Stop_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _CmdService_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd.proto",
}
